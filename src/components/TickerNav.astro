---
import { TICKER_LINKS, type TickerLink } from '../lib/consts'
import { shuffle, shuffleRef } from '../lib/miscellaneum';

interface Props {
    colorBreakpoints?: {
        vh: number;
        color: string;
    }[];
    staticSidePadding?: string;
}

const { colorBreakpoints = [], staticSidePadding = "10px" } = Astro.props;

let initialColor = 'inherit';
if (colorBreakpoints?.length && colorBreakpoints[0].vh <= 0) {
    initialColor = colorBreakpoints[0].color;
    colorBreakpoints.shift();
}

const keys: string[] = [];
for (let i = 0; i < 4; i++) {
    const tempKeys = Object.keys(TICKER_LINKS);
    shuffleRef(tempKeys);
    keys.push(...tempKeys);
}
---
<div class="ticker-wrapper" style={`color: ${initialColor};`}>
    <div class="ticker italic">
        {
            keys.map((l) => (
                <span>/</span>
                <a tabindex="-1" href={TICKER_LINKS[l as TickerLink]}>{l}</a>
            ))
        }
    </div>
</div>
<div class="ticker-wrapper-static italic" tabindex="-1" style={`--side-padding: ${staticSidePadding};`}>
    {Object.keys(TICKER_LINKS).map(l => (<a href={TICKER_LINKS[l as TickerLink]}>{l}</a><span>/</span>))}
</div>
{colorBreakpoints && colorBreakpoints.length > 0 && <script is:inline define:vars={{colorBreakpoints, initialColor}}>
    function onScroll() {
        const ticker = document.getElementsByClassName('ticker-wrapper')[0];
        let newColor;
        for (let i = 0; i < colorBreakpoints.length; i++) {
            const breakpoint = colorBreakpoints[i];
            const pastBreakpoint = window.scrollY > window.innerHeight * breakpoint.vh / 100 - ticker.clientHeight / 2;
            if (!pastBreakpoint) {

                if (newColor == breakpoint.color) {
                    // if no change, get out, avoid setting style
                    return;
                } else {
                    // if change, break to update style
                    break;
                }

            }
            // set color and test next breakpoint
            newColor = breakpoint.color            
        }
        ticker.style.color = newColor ? newColor : initialColor;
    }
    document.addEventListener('scroll', onScroll);
    document.addEventListener("astro:after-swap", () => document.removeEventListener('scroll', onScroll));
</script>}
<style type="text/css">

    .ticker-wrapper {

        width: 100vw;
        position: fixed;
        top: 0;
        left: 0;

        z-index: 10;

        overflow: hidden;
        white-space: nowrap;

        font-size: 1.125rem;

        /* transition: color 0.01s ease-in-out; */
    }

    .ticker {
        width: 400vw;
        overflow: visible;
        white-space: nowrap;
        display: flex;
        flex-flow: row-reverse nowrap;
        justify-content: space-between;
        gap: 0.625em;
        transform: translate3d(0, 0, 0);
        white-space: nowrap;
        animation-iteration-count: infinite;
        animation-timing-function: linear;
        animation-name: ticker;
        animation-duration: 180s;
        user-select: none;
    }

    .ticker:hover {
        animation-play-state: paused;
    }

    span {
        pointer-events: none;
    }

    a {
        overflow: visible;
        white-space: nowrap;
        text-decoration: none;
    }

    a:hover,
    a:focus {
        text-decoration: underline;
    }

    @keyframes ticker {
        0% {
            transform: translate3d(0, 0, 0);
        }
        100% {
            transform: translate3d(-50%, 0, 0);
        }
    }

    .ticker-wrapper-static {
        width: calc(100vw - (2 * var(--side-padding)));
        position: fixed;
        top: 0;
        left: 0;

        z-index: 10;

        overflow-y: hidden;
        overflow-x: scroll;
        white-space: nowrap;

        font-size: 1.125rem;
        white-space: nowrap;
        display: flex;
        flex-flow: row nowrap;
        gap: 0.625rem;

        background-color: var(--color-background);
        border-top: 2px solid var(--color-text);
        padding: 12px var(--side-padding) 16px;
        border-bottom: 2px solid var(--color-text);

        display: none
    }

    :global(:root) {
        --ticker-height: 1.5rem;
    }

    @media screen and (max-width: 700px), (prefers-reduced-motion: reduce) {
        
        .ticker-wrapper {
            display: none;
            user-select: none;
        }

        .ticker-wrapper-static {
            display: flex;
        }

        :global(:root) {
            --ticker-height: calc(1.125rem + 34px);
        }
    }

</style>