---
import type { ImageSize } from "../lib/consts";
import { getImgSize, getPhotoByName, getPhotosByNamesAndTags } from "../lib/photoHelper";
import { type ImageProps } from "../env";
import { getCollection } from "astro:content";
import Link from "./Link.astro";

interface Props extends ImageProps {
    includeRelatedGalleryLink?: boolean,
}

const {
    photoName,
    size,
    src,
    caption,
    captionAlign = "left",
    captionAccent = true,
    noCaption = false,
    ratio,
    crisp = false,
    includeRelatedGalleryLink = true,
} = Astro.props;

if (!photoName && !src) {
    throw Error("Image must have a photo or image prop.");
}

const photoData = photoName ? getPhotoByName(photoName) : null;


//#region related gallery

const galleries = (await getCollection("galleries")).filter(g => g.data.star);
const galleriesForThisImage: typeof galleries = []
for (var i = 0; i < galleries.length; i++) {
    const gallery = galleries[i];

    if (!includeRelatedGalleryLink || ("/" + Astro.url.pathname + "/").includes("/" + gallery.slug + "/")) {
        continue;
    }

    if (photoData) {

        if (photoData.rating != 5) {
            continue;
        }

        const photosInGallery = getPhotosByNamesAndTags({
            tags: gallery.data.photoTags,
            names: gallery.data.photoNames,
            excludeTags: gallery.data.excludeTags,
            excludeNames: gallery.data.excludeNames,
        });
        if (photosInGallery.includes(photoData)) {
            galleriesForThisImage.push(gallery);
        }
    }
    else if (src) {
        if (gallery.data.mediaNames.some(m => src.includes(m)) || src.includes(gallery.data.mediaFolder)) {
            galleriesForThisImage.push(gallery);
        }
    }
}

const relatedGallery = galleriesForThisImage[Math.floor(galleriesForThisImage.length * Math.random())];

//#endregion

const srcResolved = photoData
    ? photoData.paths[(size ?? "medium") as ImageSize]
    : src;

const captionResolved = noCaption
    ? null
    : photoData
      ? (caption ?? photoData.joinedCaption)
      : caption;

const isVideo = !photoData && src.endsWith(".mp4");

const aspectRatio =
    ratio ?? (photoData ? photoData.ratio : (await getImgSize(src)).ratio);
---

{
    isVideo ? (
        <video controls="" style={`width: 100%; aspect-ratio: ${aspectRatio};`}>
            <source src={src} type="video/mp4" />
            Your browser does not support video.
        </video>
    ) : (
        <img
            class:list={{ crisp }}
            src={srcResolved}
            style={`aspect-ratio: ${aspectRatio};`}
            alt={captionResolved}
            loading="lazy"
        />
    )
}

{
    captionResolved && (
        <div
            class:list={[
                "monospace",
                { "color-accent": captionAccent },
                captionAlign,
            ]}
        >
            {captionResolved}{includeRelatedGalleryLink && relatedGallery && <span> Also in: <Link href={"/" + relatedGallery.slug}>{relatedGallery.data.title}</Link>.</span>}
        </div>
    )
}

<style type="text/css">
    div {
        font-size: 0.8rem;
        font-weight: bold;
        margin: 4px 0;
    }

    div :global(a) {
        color: var(--color-accent);
    }
</style>
