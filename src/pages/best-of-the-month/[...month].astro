---
import BaseHead from "../../components/BaseHead.astro";
import Image from "../../components/Image.astro";
import Link from "../../components/Link.astro";
import RootColors from "../../components/RootColors.astro";
import TickerNav from "../../components/TickerNav.astro";
import { getOrdinalSuffix } from "../../lib/miscellaneum";
import { getPhotosByRating, PhotoData } from "../../lib/photoHelper";

interface BestOfTheMonthGroup {
    display: string;
    monthLongName: string;
    lastOfMonth: number;
    year: number;
    slug: string;
    items: PhotoData[];
}

/**
 * all photos >= 4 stars, grouped by month
 */
export let _allGroups: BestOfTheMonthGroup[];
export function getGroups(): BestOfTheMonthGroup[] {
    if (!_allGroups) {
        _allGroups = getPhotosByRating(4).reduce((result, photo) => {
            const displayName = new Intl.DateTimeFormat("default", {
                month: "short",
                year: "numeric",
            }).format(photo.date);

            const groupIndex = result.findIndex(
                (group) => group.display === displayName,
            );
            if (groupIndex === -1) {
                const monthName = new Intl.DateTimeFormat("default", {
                    month: "long",
                }).format(photo.date);

                const lastOfMonthDate = new Date(photo.date);
                lastOfMonthDate.setMonth(lastOfMonthDate.getMonth() + 1);
                lastOfMonthDate.setDate(0);

                result.push({
                    display: displayName,
                    slug: displayName.replaceAll(" ", "-").toLowerCase(),
                    monthLongName: monthName,
                    lastOfMonth: lastOfMonthDate.getDate(),
                    year: photo.date.getFullYear(),
                    items: [photo],
                });
            } else {
                result[groupIndex].items.push(photo);
            }

            return result;
        }, []);
    }

    return _allGroups;
}

export function getStaticPaths() {
    const monthPaths = getGroups().map((group) => group.slug);
    monthPaths.push(undefined);
    return monthPaths.map((path) => ({ params: { month: path } }));
}

const { month } = Astro.params;
const currentGroupIndex =
    month !== undefined
        ? getGroups().findIndex((group) => group.slug === month)
        : 0;

const currentGroup = getGroups()[currentGroupIndex];
const prevGroup = currentGroupIndex <= 0 ? null : getGroups()[currentGroupIndex - 1];
const nextGroup = currentGroupIndex >= getGroups().length ? null : getGroups()[currentGroupIndex + 1];

const widestOfGroup = currentGroup.items
    .map((p) => p.ratio)
    .reduce((result, current) => {
        return Math.max(result, current);
    }, 0);

// const groupsByYear = groupByKey(getGroups(), 'year');
// const years = Object.keys(groupsByYear).sort((a: string, b: string) => parseInt(b) - parseInt(a));
---

<!doctype html>
<html>
    <head>
        <BaseHead />
        <RootColors colors={{ accent: "chocolate", background: "#FEF2E9" }} />
    </head>
    <body>
        <TickerNav />
        <header>
            <h1>
                {currentGroup.monthLongName} 1<sup>st</sup> through<br />the {
                    currentGroup.lastOfMonth
                }<sup>{getOrdinalSuffix(currentGroup.lastOfMonth)}</sup>, {
                    currentGroup.year
                }.
            </h1>
            <nav class="mono-small">
                <span
                    >Go <a href="/" title="Back! to the home page.">home</a>.
                </span>
                <span
                    >More <a href="/permanent-collection" title="Back! to the home page."
                        >photography</a
                    >.
                </span>
                <span
                    ><a href="/writing" title="Back! to the home page."
                        >Writing</a
                    >.
                </span>
                <span><a href="/about" title="About me.">About</a>. </span>
                <span
                    ><Link href="mailto:duncanpetrie1@gmail.com">Email me</Link
                    >.
                </span>
                <span
                    ><Link href="https://instagram.com/probablyduncan"
                        >Instagram</Link
                    >.
                </span>
                <br />
                <br />
                <span>◮ Photo Archives:</span>
                <br />
                <br />
                {
                    getGroups().map((group, i) => {
                        if (group.slug === currentGroup.slug) {
                            return (
                                <span
                                    class="color-accent"
                                    style="cursor: not-allowed;"
                                >
                                    <b>{group.display}</b>.{" "}
                                </span>
                            );
                        } else {
                            const attrs = {
                                href: `/best-of-the-month/${i === 0 ? "" : group.slug}`,
                                title: `Best of the month: ${group.display}`,
                            };
                            return (
                                <span>
                                    <a {...attrs}>{group.display}</a>.{" "}
                                </span>
                            );
                        }
                    })
                }
            </nav>
        </header>
        <main style={`--sqrt-widest-ratio: ${Math.sqrt(widestOfGroup)};`}>
            <!-- <GalleryPhotoScroll
                photos={currentGroup.items}
                widthBasis="600px"
                shuffle={false}
            /> -->
            {
                currentGroup.items.map((photo, i) => (
                    <div
                        style={`--rand: ${Math.random() - 0.5}; --i: ${i}; --ratio: ${photo.ratio}; --sqrt-ratio: ${Math.sqrt(photo.ratio)};`}
                    >
                        <div>
                            <Image
                                photoName={photo.name}
                                size="small"
                                captionAlign="right"
                                captionAccent={false}
                            />
                        </div>
                    </div>
                ))
            }
        </main>
        <footer class="mono-small">
            <!-- «»←→⇐⇒⇱⇲◀▶◁▷◂▸◃◃▹⪦⪧⫷⫸⫹⫺ -->
            {prevGroup && <span>⇱ <a href={"/best-of-the-month/" + prevGroup.slug}>{prevGroup.display}</a></span>}
            <span>Go <a href="/">home</a>.</span>
            <span>More <Link href="/permanent-collection">photography</Link>.</span>
            {nextGroup && <span><a href={"/best-of-the-month/" + nextGroup.slug}>{nextGroup.display}</a> ⇲</span>}
        </footer>
        <style>

            header, main, footer {
                width: calc(100vw - 80px);
            }

            header {
                margin: 200px 0 100px;
                display: flex;
                flex-flow: row;
                justify-content: space-between;
                align-items: flex-end;
                padding-bottom: 40px;
                border-bottom: 2px solid var(--color-text);
            }

            h1 {
                font-size: 5.6rem;
                font-style: italic;
                font-weight: normal;
                max-width: 820px;
                max-width: calc(100% - 60px);

                margin: 0;
            }

            nav {
                width: 285px;
                min-width: 285px;
                text-align: right;
            }

            main {
                display: grid;
                grid-template-columns: 1fr 1fr 1fr;
                row-gap: 40px;
                column-gap: 40px;
                margin-bottom: 50vh;
            }

            main > div {
                display: flex;
                justify-content: center;
                align-items: center;
                width: 100%;
                /* margin-bottom: calc(40vh); */
                /* margin-bottom: min(calc(200px + var(--rand) * 40px)); */
                /* margin-right: calc(var(--rand) * 20%);
                margin-left: calc(var(--rand) * -20%); */
            }

            main > div > div {
                width: calc(
                    100% * var(--sqrt-ratio) / var(--sqrt-widest-ratio)
                );
            }

            footer {
                margin-bottom: 20px;
                display: flex;
                justify-content: center;
                align-items: baseline;
                gap: 20px;
            }

            @media screen and (max-width: 1160px) {
                h1 {
                    font-size: 2.8rem;
                }

                main {
                    grid-template-columns: 1fr 1fr;
                }
            }

            @media screen and (max-width: 750px) {
                header {
                    flex-flow: column-reverse;
                    align-items: flex-start;
                    gap: 40px;
                    width: calc(100vw - 40px);
                    margin-top: calc(var(--ticker-height) + 10px);
                    padding: 0 10px 20px 0;
                }

                h1 {
                    font-size: 3.2rem;
                    max-width: unset;
                }

                nav {
                    text-align: left;
                }

                main {
                    grid-template-columns: 1fr;
                    row-gap: 20vh;
                    width: calc(100vw - 20px);
                }

                main > div > div {
                    width: 100%;
                }
            }

            @media screen and (max-width: 500px) {
                footer {
                    flex-flow: column;
                    gap: 1em;
                    margin-bottom: 20px;
                    width: calc(100vw - 40px);
                }
            }
        </style>
    </body>
</html>
