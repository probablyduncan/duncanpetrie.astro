---
import { getCollection, type CollectionEntry } from "astro:content";
import BaseHead from "../components/BaseHead.astro";
import { marked } from "marked";
import { markedRendererWithLink, stripHtmlTags } from "../lib/linkResolver";
import TickerNav from "../components/TickerNav.astro";
import RootColors from "../components/RootColors.astro";
import Nbsp from "../components/nbsp.astro";
import Link from "../components/Link.astro";
import MarkdownImage from "../components/MarkdownImage.astro";
import Image from "../components/Image.astro";
import type { ImageProps } from "../env";
import { getEntryBySlug } from "astro:content";
import ThemeManager from "../components/ThemeManager.astro";
import { getGenericArticleThemes } from "../lib/themeHelper";

type Props = CollectionEntry<"articles">;
export async function getStaticPaths() {
    const posts: any[] = await getCollection("articles");
    return posts.map((post) => ({
        params: { article: post.slug },
        props: post,
    }));
}

const post = Astro.props;
const { Content, headings } = await post.render();

const dateDisplay =
    new Intl.DateTimeFormat("en-US", { month: "long" }).format(post.data.date) +
    ", " +
    post.data.date.getFullYear();

const heroImage = post.data.image as ImageProps;

//#region metadata resolving

const metadataRenderer = markedRendererWithLink();
const metadata: Record<string, string> = {
    url: `[/${post.slug}]()`,
};
for (const key in post.data.metadata as object) {
    metadata[key] = post.data.metadata[key].toString();
}

//#endregion
//#region metadata icons
// ⟪⟫ ⟬ ⟭ ⟦ ⟧ ⁎ ⁑ ․ ⁚ ⁖ ⁙ ⁘ ⁝ ⁍⁌⁋¶ ⇱↸⇲  ⇡⇵↨↥↰⇈⇊⇞⇡⇝↿↾↥↟↑↕
const iconSwaps = [
    ["◑", "◐"],
    ["◑", "◗"],
    ["◑", "◖"],
    [">", "<"],
    ["◮", "◭"],
    ["◪", "◩"],
    ["⟧", "⟭"],
    ["⟦", "⟬"],
    ["⇱", "⇲"],
    ["↸", "⇲"],
    ["⇡", "↥"],
    ["↑", "↕"],
];

const homeIconSwap = iconSwaps[0];
const metadataIconSwap = [iconSwaps[4], iconSwaps[5]];
const contentsIconSwap = [iconSwaps[8], iconSwaps[9]];
const topIconSwap = iconSwaps[10];
//#endregion
---

<!doctype html>
<html lang="en">
    <head>
        <BaseHead
            title={post.data.title}
            description={stripHtmlTags(
                await marked.parseInline(
                    post.body.substring(
                        0,
                        post.body.substring(100).indexOf("\n") + 100,
                    ),
                ),
            ).trim() + ".."}
        />
        <RootColors colors={{}} />
    </head>
    <body>
        <TickerNav />
        <main>
            <aside class="monospace">
                <nav>
                    <a
                        class="nav-link"
                        id="home-link"
                        data-hover-swap-trigger
                        href="/"
                    >
                        <span data-hover-swap={JSON.stringify(homeIconSwap)}>{homeIconSwap[0]}</span> Back to <span class="nav-link-hover">home</span>
                    </a>.
                    <br /><br />
                    More: <b><Link>Writing</Link>. <Link>Photography</Link>. <Link>Springtide</Link>. <Link>About</Link>.</b>
                    <br /><br />
                    {
                        post.data.related?.length && <>
                            Related: {post.data.related.map(async (r, i) => {
                                const entryPromise = getEntryBySlug(r.collection, r.slug);
                                const link = (r.collection === 'springtide' ? "/springtide/" : "/") + (r.slug);
                                const comma = i > 0 ? ", or " : "";
                                const entry = await entryPromise;
                                const title = entry.data.title.replace("//", " ");
                                const titleWithCollection = r.collection[0].toUpperCase() + r.collection.substring(1) + ": " + title;
                                return <>{comma}<Link href={link} title={titleWithCollection}><b>{entry.data.title.replace("//", " ")}</b></Link></>;
                            })}.
                        <br/><br/>
                        </>
                    }
                    <button
                        id="metadata-control"
                        data-hover-swap-trigger
                        data-accordion-control
                        class="nav-link"
                        aria-expanded="false"
                        aria-controls="metadata-content"
                        title="Click to show additional document information."
                    >
                        <span data-show-text
                            ><span
                                data-hover-swap={JSON.stringify(
                                    metadataIconSwap[0],
                                )}>{metadataIconSwap[0][0]}</span
                            > Show</span
                        >
                        <span data-hide-text hidden
                            ><span
                                data-hover-swap={JSON.stringify(
                                    metadataIconSwap[1],
                                )}>{metadataIconSwap[1][0]}</span
                            > Hide</span
                        >
                        <span class="nav-link-hover">metadata</span>
                    </button>.
                    <br /><br />
                    <div
                        data-accordion-content
                        id="metadata-content"
                        aria-labelledby="metadata-control"
                        hidden
                    >
                        <span><b>{post.data.title}</b> ({post.data.date?.getFullYear()}) by Duncan Petrie.</span>
                        <br /><br />
                        <span
                            ><b>The following</b> (text|poem|manifesto|confession)
                            is an excerpt from the archives of duncan­petrie.com
                            for the use of anyone anywhere at no cost and with almost
                            no restrictions whatsoever.</span
                        >
                        <br /><br />
                        <span
                            ><b>Acceptable uses include:</b> reading to children
                            at bedtime, taking twice daily with food, printing on
                            cocktail napkins, throwing out the window, sending to
                            local politicians, and ignoring entirely.</span
                        >
                        <br /><br />
                        <b>Not suitable for resale. </b>
                        {
                            metadata &&
                                Object.keys(metadata).map((key) => {
                                    const upperKey = key[0].toUpperCase() + key.substring(1);
                                    const parsedVal = marked.parseInline(
                                        metadata[key].toString(),
                                        {
                                            renderer: metadataRenderer,
                                            async: false,
                                        },
                                    ) as string;

                                    return <>
                                        <br /><br />
                                        <b>{upperKey}:</b> <span set:html={parsedVal} />
                                    </>;
                                })
                        }
                    </div>
                </nav>
                <nav>
                    <button class="nav-link" data-hover-swap-trigger="" data-go-to>
                        <span data-hover-swap={JSON.stringify(topIconSwap)}>{topIconSwap[0]}</span><Nbsp/>Back to <span class="nav-link-hover">top</span>
                    </button>.
                </nav>
            </aside>
            <article>
                {
                    heroImage && (
                        <>
                            <>
                                <Image {...heroImage} />
                                <br />
                                <br />
                            </>
                        </>
                    )
                }
                <h1>{post.data.title.split("//").map((h) => (<>{h}<br /></>))}</h1>
                <h4 class="white-space-pre">{dateDisplay}<Nbsp />|<Nbsp />{post.data.location}</h4>
                <Content components={{ a: Link, img: MarkdownImage }} />
            </article>
            <div id="progress-bar">
                <div class="progress-ruler ruler"></div>
                <div class="ruler"></div>
            </div>
        </main>
    </body>
    <ThemeManager
        storeKey="photoIndexTheme"
        themeData={getGenericArticleThemes()}
    />
</html>
<script>
    function attachEvents() {
        
        // simple hover swap, just switch between two strings when hovering
        
        document.querySelectorAll("[data-hover-swap-trigger]").forEach((_e) => {
            const e = _e as HTMLElement;
            const targets = e.querySelectorAll("[data-hover-swap");

            if (!targets || !targets.length) {
                return;
            }

            function swapIcon(isOver: boolean) {
                targets.forEach((_t) => {
                    const t = _t as HTMLElement;
                    t.innerHTML = JSON.parse(t.dataset.hoverSwap)[
                        isOver ? 1 : 0
                    ];
                });
            }

            e.addEventListener("mouseenter", () => {
                swapIcon(true);
            });
            e.addEventListener("mouseleave", () => {
                swapIcon(false);
            });
        });

        // accordion open/close and icon swap

        document.querySelectorAll("[data-accordion-control]").forEach((_e) => {
            const button = _e as HTMLElement;
            const contentID = button.getAttribute("aria-controls");
            const content = document.getElementById(contentID) as HTMLElement;

            const buttonShowText = button.querySelector(
                "[data-show-text",
            ) as HTMLElement;
            const buttonHideText = button.querySelector(
                "[data-hide-text",
            ) as HTMLElement;

            button.addEventListener("click", () => {
                const nowShowing =
                    button.getAttribute("aria-expanded") !== "true";
                button.setAttribute("aria-expanded", nowShowing.toString());
                content.hidden = !nowShowing;

                buttonShowText.hidden = nowShowing;
                buttonHideText.hidden = !nowShowing;
            });
        });

        // scroll to buttons

        document.querySelectorAll("[data-go-to").forEach((_e) => {
            const e = _e as HTMLElement;
            const goToID = e.dataset.goTo;
            const goToOffset = goToID && document.getElementById(goToID)?.offsetTop || 0;
            e.addEventListener("click", () => {
                window.scrollTo({
                    top: goToOffset,
                    behavior: "smooth",
                });
            });
        });

        // ruler scroll tracking

        const ruler = document.getElementById("progress-bar");
        const article = document.querySelector("article");
        if (ruler && article) {
            document.addEventListener("scroll", () => {

                // if article is smaller than window, don't use this
                if (window.innerHeight > article.clientHeight) {
                    ruler.style.setProperty("--scroll-pos", "0");
                    return;
                }

                // we need a lerp value between: when top of article is at top of page and bottom of article is at bottom of page
                // this amounts to: the distance from the top of the article (trueOffsetTop) to the top of the viewport (scrollY),
                // divided by the total height of the article minus the viewport height 
                const trueArticleOffsetTop = article.offsetTop + article.parentElement.offsetTop;
                const scrollFromArticleTop = Math.max(0, window.scrollY - trueArticleOffsetTop);
                const totalPossibleScrollHeight = article.clientHeight - window.innerHeight;
                const articleScrollLerp = Math.min(1, Math.max(0, scrollFromArticleTop / totalPossibleScrollHeight));

                ruler.style.setProperty("--scroll-pos", articleScrollLerp.toString());
            });
        }
    }

    document.addEventListener("astro:after-swap", () => {
        attachEvents();
    });
    attachEvents();
</script>
<style>
    main {
        position: relative;
        margin-top: 60px;
        margin-bottom: calc(100vh - 60px);

        display: flex;
        flex-flow: row;
        justify-content: flex-start;
        align-items: stretch;

        /* width: 1200px; */
        max-width: 90vw;
    }

    article {
        padding: 60px;
        border: 2px solid var(--color-text);
        background-color: var(--color-article-background);

        width: 680px;
        min-height: calc(100vh - 240px);
    }

    article :global(p):last-of-type::after {
        content: "⁘";
        margin-left: 0.5rem;
        position: relative;
    }

    :global(h1) {
        font-size: 3rem;
    }

    :global(h2) {
        font-size: 2rem;
    }

    :global(h3) {
        font-size: 1.5rem;
    }

    :global(h4) {
        font-style: italic;
        font-weight: normal;
        font-size: 1em;
    }

    :global(p) {
        line-height: 2em;
        margin: 1em 0 0;
    }

    article :global(a) {
        color: var(--color-accent);
    }

    h1 {
        margin: 8px 0 0;
    }

    h4 {
        margin: 8px 0 32px;
    }

    aside {
        max-width: 250px;
        min-width: 250px;

        margin-right: 40px;
        margin-top: 120px;
        font-size: 0.9rem;

        display: grid;
        grid-template-rows: 1fr auto;

        hyphens: none;
        -moz-hyphens: none;
        -ms-hyphens: none;
        -webkit-hyphens: none;
    }

    nav {
        padding: 2px;
    }

    nav button {
        user-select: unset;
    }

    a.nav-link:hover,
    button.nav-link {
        text-decoration: unset;
    }

    a.nav-link span.nav-link-hover,
    button.nav-link span.nav-link-hover {
        font-weight: bold;
    }

    a.nav-link:hover span.nav-link-hover,
    button.nav-link:hover span.nav-link-hover {
        text-decoration: underline;
    }

    [data-accordion-content] {
        margin-left: 6px;
        padding-left: 14px;
        border-left: 2px solid var(--color-text);
        margin-bottom: 3em;
    }

    #metadata-content :global(a) {
        color: var(--color-accent);
    }

    .ruler {
        /* inspiration: https://dev.to/madsstoumann/build-a-css-ruler-2opn */

        --ruler-thickness: 2px;
        --ruler-color: var(--color-text);
        --ruler-height: 4px;
        --ruler-spacing: 8px;
        --ruler-large-tick-increment: 4;

        background-image: linear-gradient(
                -180deg,
                var(--ruler-color) 0 var(--ruler-thickness),
                transparent 0
            ),
            linear-gradient(
                -180deg,
                var(--ruler-color) 0 var(--ruler-thickness),
                transparent 0
            );

        background-repeat: repeat-y;
        background-size:
            var(--ruler-height) var(--ruler-spacing),
            calc(var(--ruler-height) * 2) calc( var(--ruler-spacing) * (var(--ruler-large-tick-increment) + 1));

        width: 100%;
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
    }

    #progress-bar {

        width: 12px;
        margin-top: 8px;
        max-height: 100vh;
        position: sticky;
        top: 0;

        --scroll-pos: 0;
    }

    .progress-ruler {
        z-index: 2;
        height: calc(var(--scroll-pos) * 100%);
        --ruler-height: 6px;
    }

    .progress-ruler::after {
        content: "◀";
        position: absolute;
        font-size: 0.675rem;
        bottom: -8.5px;
        left: calc(100% + 4px);
        width: 110px;
    }
</style>
